FROM --platform=amd64 ubuntu:xenial

  
LABEL base.image="ubuntu:xenial"
LABEL dockerfile.version="2"
LABEL software="pangolin"
LABEL software.version=${PANGOLIN_VERSION}

# install needed software for conda install
RUN apt-get update && apt-get install -y \
  wget \
  git \
  build-essential

# get miniconda
RUN wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
 bash ./Miniconda3-latest-Linux-x86_64.sh -p /miniconda -b  && \
  rm Miniconda3-latest-Linux-x86_64.sh

# Override this and PANGOLIN_DATA_VERSION with --build-arg. Default versions given here.
ARG PANGOLIN_VERSION

# Get main Pangolin software release (pulls in pangolin-data newest as a dependency)
RUN wget -q "https://github.com/cov-lineages/pangolin/archive/v${PANGOLIN_VERSION}.tar.gz" && \
  tar -xf v${PANGOLIN_VERSION}.tar.gz && \
  mv pangolin-${PANGOLIN_VERSION} pangolin

# set the environment
ENV PATH="/miniconda/bin:$PATH" \
 LC_ALL=C

# create the conda environment and set as default
RUN conda env create -f /pangolin/environment.yml
RUN echo "source activate pangolin" > /etc/bash.bashrc
ENV PATH /miniconda/envs/pangolin/bin:$PATH
# Install pangolin
RUN cd pangolin && \
 python setup.py install && \
 mkdir /data


ARG PANGOLIN_DATA_VERSION
# install and update pangolin data
RUN /bin/bash -c 'cd .. && \
 source activate pangolin && \
 wget -q https://github.com/cov-lineages/pangolin-data/archive/v${PANGOLIN_DATA_VERSION}.tar.gz && \
 tar -xf v${PANGOLIN_DATA_VERSION}.tar.gz && \
 cd pangolin-data-${PANGOLIN_DATA_VERSION} && \
 pip install .'

# Set work dir - for interactive use with docker
WORKDIR /data

# Show version
RUN pangolin -v